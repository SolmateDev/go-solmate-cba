// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solmate_cba

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/SolmateDev/solana-go"
	ag_format "github.com/SolmateDev/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AddValidator is the `addValidator` instruction.
type AddValidator struct {
	CrankFeeRateNum *uint64
	CrankFeeRateDen *uint64
	Address         *ProxyAddress

	// [0] = [] controller
	//
	// [1] = [WRITE] validatorPipeline
	//
	// [2] = [WRITE] periods
	//
	// [3] = [WRITE] bids
	//
	// [4] = [] pcMint
	//
	// [5] = [SIGNER] validator
	//
	// [6] = [WRITE, SIGNER] admin
	//
	// [7] = [] systemProgram
	//
	// [8] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddValidatorInstructionBuilder creates a new `AddValidator` instruction builder.
func NewAddValidatorInstructionBuilder() *AddValidator {
	nd := &AddValidator{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 9),
	}
	return nd
}

// SetCrankFeeRateNum sets the "crankFeeRateNum" parameter.
func (inst *AddValidator) SetCrankFeeRateNum(crankFeeRateNum uint64) *AddValidator {
	inst.CrankFeeRateNum = &crankFeeRateNum
	return inst
}

// SetCrankFeeRateDen sets the "crankFeeRateDen" parameter.
func (inst *AddValidator) SetCrankFeeRateDen(crankFeeRateDen uint64) *AddValidator {
	inst.CrankFeeRateDen = &crankFeeRateDen
	return inst
}

// SetAddress sets the "address" parameter.
func (inst *AddValidator) SetAddress(address ProxyAddress) *AddValidator {
	inst.Address = &address
	return inst
}

// SetControllerAccount sets the "controller" account.
func (inst *AddValidator) SetControllerAccount(controller ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(controller)
	return inst
}

// GetControllerAccount gets the "controller" account.
func (inst *AddValidator) GetControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetValidatorPipelineAccount sets the "validatorPipeline" account.
func (inst *AddValidator) SetValidatorPipelineAccount(validatorPipeline ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(validatorPipeline).WRITE()
	return inst
}

// GetValidatorPipelineAccount gets the "validatorPipeline" account.
func (inst *AddValidator) GetValidatorPipelineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPeriodsAccount sets the "periods" account.
func (inst *AddValidator) SetPeriodsAccount(periods ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(periods).WRITE()
	return inst
}

// GetPeriodsAccount gets the "periods" account.
func (inst *AddValidator) GetPeriodsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBidsAccount sets the "bids" account.
func (inst *AddValidator) SetBidsAccount(bids ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(bids).WRITE()
	return inst
}

// GetBidsAccount gets the "bids" account.
func (inst *AddValidator) GetBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPcMintAccount sets the "pcMint" account.
func (inst *AddValidator) SetPcMintAccount(pcMint ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(pcMint)
	return inst
}

// GetPcMintAccount gets the "pcMint" account.
func (inst *AddValidator) GetPcMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetValidatorAccount sets the "validator" account.
func (inst *AddValidator) SetValidatorAccount(validator ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(validator).SIGNER()
	return inst
}

// GetValidatorAccount gets the "validator" account.
func (inst *AddValidator) GetValidatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAdminAccount sets the "admin" account.
func (inst *AddValidator) SetAdminAccount(admin ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *AddValidator) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AddValidator) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AddValidator) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetRentAccount sets the "rent" account.
func (inst *AddValidator) SetRentAccount(rent ag_solanago.PublicKey) *AddValidator {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *AddValidator) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

func (inst AddValidator) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddValidator,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddValidator) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddValidator) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.CrankFeeRateNum == nil {
			return errors.New("CrankFeeRateNum parameter is not set")
		}
		if inst.CrankFeeRateDen == nil {
			return errors.New("CrankFeeRateDen parameter is not set")
		}
		if inst.Address == nil {
			return errors.New("Address parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Controller is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ValidatorPipeline is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Periods is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Bids is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.PcMint is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Validator is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *AddValidator) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddValidator")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("CrankFeeRateNum", *inst.CrankFeeRateNum))
						paramsBranch.Child(ag_format.Param("CrankFeeRateDen", *inst.CrankFeeRateDen))
						paramsBranch.Child(ag_format.Param("        Address", *inst.Address))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=9]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       controller", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("validatorPipeline", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("          periods", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("             bids", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("           pcMint", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("        validator", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            admin", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("    systemProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("             rent", inst.AccountMetaSlice.Get(8)))
					})
				})
		})
}

func (obj AddValidator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CrankFeeRateNum` param:
	err = encoder.Encode(obj.CrankFeeRateNum)
	if err != nil {
		return err
	}
	// Serialize `CrankFeeRateDen` param:
	err = encoder.Encode(obj.CrankFeeRateDen)
	if err != nil {
		return err
	}
	// Serialize `Address` param:
	err = encoder.Encode(obj.Address)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddValidator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CrankFeeRateNum`:
	err = decoder.Decode(&obj.CrankFeeRateNum)
	if err != nil {
		return err
	}
	// Deserialize `CrankFeeRateDen`:
	err = decoder.Decode(&obj.CrankFeeRateDen)
	if err != nil {
		return err
	}
	// Deserialize `Address`:
	err = decoder.Decode(&obj.Address)
	if err != nil {
		return err
	}
	return nil
}

// NewAddValidatorInstruction declares a new AddValidator instruction with the provided parameters and accounts.
func NewAddValidatorInstruction(
	// Parameters:
	crankFeeRateNum uint64,
	crankFeeRateDen uint64,
	address ProxyAddress,
	// Accounts:
	controller ag_solanago.PublicKey,
	validatorPipeline ag_solanago.PublicKey,
	periods ag_solanago.PublicKey,
	bids ag_solanago.PublicKey,
	pcMint ag_solanago.PublicKey,
	validator ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *AddValidator {
	return NewAddValidatorInstructionBuilder().
		SetCrankFeeRateNum(crankFeeRateNum).
		SetCrankFeeRateDen(crankFeeRateDen).
		SetAddress(address).
		SetControllerAccount(controller).
		SetValidatorPipelineAccount(validatorPipeline).
		SetPeriodsAccount(periods).
		SetBidsAccount(bids).
		SetPcMintAccount(pcMint).
		SetValidatorAccount(validator).
		SetAdminAccount(admin).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent)
}
