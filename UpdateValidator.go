// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package solmate_cba

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/SolmateDev/solana-go"
	ag_format "github.com/SolmateDev/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateValidator is the `updateValidator` instruction.
type UpdateValidator struct {
	CrankFeeRateNum *uint64
	CrankFeeRateDen *uint64
	GrpcUrl         *[128]uint8

	// [0] = [] controller
	//
	// [1] = [WRITE] validatorPipeline
	//
	// [2] = [WRITE, SIGNER] admin
	//
	// [3] = [WRITE, SIGNER] newAdmin
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateValidatorInstructionBuilder creates a new `UpdateValidator` instruction builder.
func NewUpdateValidatorInstructionBuilder() *UpdateValidator {
	nd := &UpdateValidator{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetCrankFeeRateNum sets the "crankFeeRateNum" parameter.
func (inst *UpdateValidator) SetCrankFeeRateNum(crankFeeRateNum uint64) *UpdateValidator {
	inst.CrankFeeRateNum = &crankFeeRateNum
	return inst
}

// SetCrankFeeRateDen sets the "crankFeeRateDen" parameter.
func (inst *UpdateValidator) SetCrankFeeRateDen(crankFeeRateDen uint64) *UpdateValidator {
	inst.CrankFeeRateDen = &crankFeeRateDen
	return inst
}

// SetGrpcUrl sets the "grpcUrl" parameter.
func (inst *UpdateValidator) SetGrpcUrl(grpcUrl [128]uint8) *UpdateValidator {
	inst.GrpcUrl = &grpcUrl
	return inst
}

// SetControllerAccount sets the "controller" account.
func (inst *UpdateValidator) SetControllerAccount(controller ag_solanago.PublicKey) *UpdateValidator {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(controller)
	return inst
}

// GetControllerAccount gets the "controller" account.
func (inst *UpdateValidator) GetControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetValidatorPipelineAccount sets the "validatorPipeline" account.
func (inst *UpdateValidator) SetValidatorPipelineAccount(validatorPipeline ag_solanago.PublicKey) *UpdateValidator {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(validatorPipeline).WRITE()
	return inst
}

// GetValidatorPipelineAccount gets the "validatorPipeline" account.
func (inst *UpdateValidator) GetValidatorPipelineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAdminAccount sets the "admin" account.
func (inst *UpdateValidator) SetAdminAccount(admin ag_solanago.PublicKey) *UpdateValidator {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(admin).WRITE().SIGNER()
	return inst
}

// GetAdminAccount gets the "admin" account.
func (inst *UpdateValidator) GetAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNewAdminAccount sets the "newAdmin" account.
func (inst *UpdateValidator) SetNewAdminAccount(newAdmin ag_solanago.PublicKey) *UpdateValidator {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(newAdmin).WRITE().SIGNER()
	return inst
}

// GetNewAdminAccount gets the "newAdmin" account.
func (inst *UpdateValidator) GetNewAdminAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst UpdateValidator) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateValidator,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateValidator) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateValidator) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.CrankFeeRateNum == nil {
			return errors.New("CrankFeeRateNum parameter is not set")
		}
		if inst.CrankFeeRateDen == nil {
			return errors.New("CrankFeeRateDen parameter is not set")
		}
		if inst.GrpcUrl == nil {
			return errors.New("GrpcUrl parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Controller is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ValidatorPipeline is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Admin is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NewAdmin is not set")
		}
	}
	return nil
}

func (inst *UpdateValidator) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateValidator")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("CrankFeeRateNum", *inst.CrankFeeRateNum))
						paramsBranch.Child(ag_format.Param("CrankFeeRateDen", *inst.CrankFeeRateDen))
						paramsBranch.Child(ag_format.Param("        GrpcUrl", *inst.GrpcUrl))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       controller", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("validatorPipeline", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            admin", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         newAdmin", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj UpdateValidator) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `CrankFeeRateNum` param:
	err = encoder.Encode(obj.CrankFeeRateNum)
	if err != nil {
		return err
	}
	// Serialize `CrankFeeRateDen` param:
	err = encoder.Encode(obj.CrankFeeRateDen)
	if err != nil {
		return err
	}
	// Serialize `GrpcUrl` param:
	err = encoder.Encode(obj.GrpcUrl)
	if err != nil {
		return err
	}
	return nil
}
func (obj *UpdateValidator) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `CrankFeeRateNum`:
	err = decoder.Decode(&obj.CrankFeeRateNum)
	if err != nil {
		return err
	}
	// Deserialize `CrankFeeRateDen`:
	err = decoder.Decode(&obj.CrankFeeRateDen)
	if err != nil {
		return err
	}
	// Deserialize `GrpcUrl`:
	err = decoder.Decode(&obj.GrpcUrl)
	if err != nil {
		return err
	}
	return nil
}

// NewUpdateValidatorInstruction declares a new UpdateValidator instruction with the provided parameters and accounts.
func NewUpdateValidatorInstruction(
	// Parameters:
	crankFeeRateNum uint64,
	crankFeeRateDen uint64,
	grpcUrl [128]uint8,
	// Accounts:
	controller ag_solanago.PublicKey,
	validatorPipeline ag_solanago.PublicKey,
	admin ag_solanago.PublicKey,
	newAdmin ag_solanago.PublicKey) *UpdateValidator {
	return NewUpdateValidatorInstructionBuilder().
		SetCrankFeeRateNum(crankFeeRateNum).
		SetCrankFeeRateDen(crankFeeRateDen).
		SetGrpcUrl(grpcUrl).
		SetControllerAccount(controller).
		SetValidatorPipelineAccount(validatorPipeline).
		SetAdminAccount(admin).
		SetNewAdminAccount(newAdmin)
}
